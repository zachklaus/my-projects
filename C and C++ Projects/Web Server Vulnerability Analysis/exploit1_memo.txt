To: FrobozzCo Management
From: FrobozzCo Security Admin
Date: May 4th, 2019
Subject: Web Server Buffer Overflow Exploit

There exists a vulnerability within our web server that hosts statistics relating to frobnick production
reports. This vulnerability allows for buffer overflow attacks. This is what we believed has resulted in
an unauthorized entity gaining root access to the server.


Security flaw:
The vulnerability lies within the file webserver.c in the directory /usr/src/fhttpd/server. Specifically,
in the function send_respone(), we believe the issue lies with the lines

char *path = req->uri;

if (req->uri == NULL || req->method == NULL ||
    req->headers == NULL || req->version == NULL) {
  return 0;
}


In send_response(), the buffer size allocated to the uri can be overflowed by sending a request for a non
existent file with a name that is very long. Once the address of the file is placed in uri, the buffer is overflowed.
When the program attempts to access the contents of the uri, a segmentation fault occurs and the server program crashes.
Using this, shell code could be injected into the server and this is how we believe an unauthorized entity gained access
to the server.

How we would fix it:
To fix this, we would place code in parsereq() that checks if the total size of the uri is less than the size
of the uri buffer before placing it into the uri buffer. This way the buffer cannot be overflowed by attempting
to use a very long uri.

How to use our demo:
1. Run the fhttpd server on port 8080 using the command ./fhttpd 8080
2. Run the command ./exploit1.sh

This will run the script which uses curl to send a request to the fhttpd server with a uri asking for a non existent file with a
name that is 2000 characters long. This overloads the buffer for the uri and causes a segmentation fault, crashing the server.
We did not need to use the file payload1 as curl does not need this file.

Seriousness of breach:
If the unauthorized entity has gained root access to the server, this is very serious. With this he/she can perform functions
that can greatly compromise the functions of the company such as deleting, copying, and moving files as well as installing
malware to perform other functions.

Recovery plan:
To recover from the breach, all user accounts on the server must be verified and any that are not verified should be removed.
In addition, all users should change his/her password in case the intruder gained access to the password file. Finally,
a thorough scan should be completed of the system to check for malware such as viruses, worms, rootkits, etc... and any
unauthorized programs should be removed. This is all in addition to removing the vulnerability in webserver.c.

Other observations:
None

